#!/usr/bin/env python3
import subprocess
import concurrent.futures
import re

selected_screen_absolute_height = 0
selected_screen_absolute_width = 0
leftmost_screen_width = 0
leftmost_screen_height = 0
stream_resolutions = []
result = ""
window_scale = 30
window_placement_x = 0
window_placement_y = 0
mpv_processes = []
prev_y = []
monitors = []
monitor_index = -1

rtsp_urls = [
    # "rtsp://admin:mt-rover_123@192.168.1.90:554/Streaming/Channels/101",
    # "rtsp://admin:mt-rover_123@192.168.1.90:554/Streaming/Channels/201",
    #"rtsp://admin:mt-rover_123@192.168.1.90:554/Streaming/Channels/301",
    # "rtsp://admin:mt-rover_123@192.168.1.90:554/Streaming/Channels/401",
    #"rtsp://admin:mt-rover_123@192.168.1.90:554/Streaming/Channels/501",
    #"rtsp://admin:mt-rover_123@192.168.1.90:554/Streaming/Channels/601",
    #"rtsp://admin:mt-rover_123@192.168.1.90:554/Streaming/Channels/701",
    #"rtsp://admin:mt-rover_123@192.168.1.90:554/Streaming/Channels/801",
    #"rtsp://localhost:8554/cam1",
    #"rtsp://localhost:8554/cam2",
    #"rtsp://localhost:8554/cam3",
    #"rtsp://localhost:8554/cam4",
    "rtsp://192.168.1.69:8554/cam1",
    "rtsp://192.168.1.69:8554/cam2",
    "rtsp://192.168.1.69:8554/cam3",
    "rtsp://192.168.1.69:8554/cam4",
]

def get_monitor_info():
    try:
        output = subprocess.check_output(['xrandr', '--query']).decode('utf-8')
    except subprocess.CalledProcessError as e:
        print("Failed to run xrandr:", e)
        return

    monitor_info = []
    # Matches lines like: "HDMI-1 connected primary 1920x1080+0+0 ..."
    pattern = re.compile(r'^(\S+)\s+connected.*?(\d+)x(\d+)\+(\d+)\+(\d+)')

    for line in output.splitlines():
        match = pattern.match(line)
        if match:
            name, width, height, x, y = match.groups()
            monitor_info.append({
                'name': name,
                'resolution': (int(width), int(height)),
                'position': (int(x), int(y))
            })

    return monitor_info

def get_resolution(url):
    """Fetches the resolution of a given RTSP stream and returns it as (stream_id, width, height)."""
    cmd = [
        "ffprobe", "-v", "error", "-select_streams", "v:0",
        "-show_entries", "stream=width,height", "-of", "csv=s=x:p=0",
        url
    ]

    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        width, height = result.stdout.strip().split("x")
        return (url, (int(width), int(height)))  # Store as tuple
    except subprocess.CalledProcessError:
        return (url, (None, None))  # Return None values if there's an error

def run_mpv(url,x,y,width,height):
    
    if "Streaming/Channels" in url: # for dvr
        command = [
        "mpv", "--osc=no", "--no-cache", "--no-audio","--no-border", "--untimed", "--no-demuxer-thread", "--vd-lavc-threads=1",
        f"--geometry={width}x{height}+{x}+{y}/2", "--vf=format=yuv420p,hflip", url]
        
    else: # for webcam
        command = [
        "mpv", "--osc=no", "--no-cache", "--no-border", "--untimed", "--no-demuxer-thread", "--vd-lavc-threads=1",
        f"--geometry={width}x{height}+{x}+{y}/2", url]

    return subprocess.Popen(command)

# Get monitor resolutions and starting x, y
monitors = get_monitor_info()

# Choose monitor
while monitor_index <= -1:
    print("Please select a monitor")
    for i in range(len(monitors)):
        print(f"[{i}] => {monitors[i]['name']} ({monitors[i]['resolution'][0]}x{monitors[i]['resolution'][1]})")
    monitor_input = input()

    if monitor_input == '':
        monitor_input = "0"
    if monitor_input.isnumeric():
        monitor_input = int(monitor_input)
    else:
        continue
    if monitor_input < len(monitors):
        monitor_index = monitor_input

print(f"Using {monitors[monitor_index]['name']} ({monitors[monitor_index]['resolution'][0]}x{monitors[monitor_index]['resolution'][1]})")
selected_screen_width = monitors[monitor_index]['resolution'][0]
selected_screen_height = monitors[monitor_index]['resolution'][1]
selected_screen_absolute_width = monitors[monitor_index]['position'][0] + monitors[monitor_index]['resolution'][0]
selected_screen_absolute_height = monitors[monitor_index]['position'][1] + monitors[monitor_index]['resolution'][1]
# Get leftmost monitor width and height

for i in range(len(monitors)):
    if monitors[i]['position'][0] == 0 and monitors[i]['position'][1] == 0:
        leftmost_screen_width = monitors[i]['resolution'][0] 
        leftmost_screen_height = monitors[i]['resolution'][1]


# Get video stream resolutions concurrently
with concurrent.futures.ThreadPoolExecutor() as executor:
    stream_resolutions = dict(executor.map(get_resolution, rtsp_urls))
    print(stream_resolutions)

window_placement_x = monitors[monitor_index]['position'][0]
window_placement_y = monitors[monitor_index]['position'][1]

# Create video wall
for rtsp_url in rtsp_urls:
    if stream_resolutions[rtsp_url][0] is None or stream_resolutions[rtsp_url][1] is None:
        print(f"Skipping stream {rtsp_url} due to resolution fetch failure.")
        continue

    width = int((window_scale / 100) * selected_screen_width) #mpv for some reason scales according the left most monitor
    height = int((stream_resolutions[rtsp_url][1] / stream_resolutions[rtsp_url][0]) * width)

    if window_placement_x == monitors[monitor_index]['position'][0] and window_placement_y == monitors[monitor_index]['position'][1]:
        print(f"{rtsp_url} ({width} {height}) {window_placement_x} {window_placement_y}")
        mpv_processes.append(run_mpv(rtsp_url,window_placement_x,window_placement_y,width,height))
        prev_y.append(height)
        window_placement_x += width

    else:
        remaining_x = selected_screen_absolute_width - window_placement_x
        print(f"{remaining_x}(remaining_x) < {width}(window_width) => {remaining_x < width}")
        if remaining_x < width:
            window_placement_y += max(prev_y)
            prev_y = []
            window_placement_x = monitors[monitor_index]['position'][0]

        print(f"{rtsp_url} ({width} {height}) {window_placement_x} {window_placement_y}")
        mpv_processes.append(run_mpv(rtsp_url,window_placement_x,window_placement_y,width,height))
        prev_y.append(height)
        window_placement_x += width
